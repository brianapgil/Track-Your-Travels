<section class="section">
  <div class="container">
    <h2 class="title">Add New Travel Entry</h2>

    {{!-- Form for adding a new travel entry --}}
    <form id="new-entry-form">
      <div class="field">
        <label class="label" for="title">Title:</label>
        <div class="control">
          <input class="input" type="text" id="title" name="title" required>
        </div>
      </div>
      <div class="field">
        <label class="label" for="description">Description:</label>
        <div class="control">
          <textarea class="textarea" id="description" name="description" required></textarea>
        </div>
      </div>
      <div class="field">
        <label class="label" for="location">Location (Latitude, Longitude):</label>
        <div class="control">
          <input class="input" type="text" id="location" name="location" placeholder="e.g., 40.712776, -74.005974" required>
        </div>
      </div>
      <div class="field">
        <label class="label" for="map">Map:</label>
        <div id="map" class="map-container" style="height: 400px;"></div>
      </div>
      <div class="control">
        <button class="button is-primary" type="submit">Add Entry</button>
      </div>
    </form>
  </div>
</section>

<!-- Mapbox JS -->
<script src="https://api.mapbox.com/mapbox-gl-js/v2.8.1/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.8.1/mapbox-gl.css" rel="stylesheet">

<script>
  mapboxgl.accessToken = '{{mapboxToken}}'; // Ensure this is correctly passed

  // Initialize the map
  const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v11',
    center: [-74.005974, 40.712776], // Default location (New York City)
    zoom: 12
  });

  // Adds a click listener for location inputs
  map.on('click', (e) => {
    const coordinates = e.lngLat;
    document.getElementById('location').value = `${coordinates.lat}, ${coordinates.lng}`;
    console.log(`${coordinates.lat}, ${coordinates.lng}`)
  });

  // Handles form submission
  document.getElementById('new-entry-form').addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent the default form submission

    // Create an object from form data
    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData.entries());

    try {
      // Sends POST request to add a new entry
      const response = await fetch('/api/entries', {
        method: 'POST',
        body: JSON.stringify(data),
        headers: { 'Content-Type': 'application/json' },
      });

      if (response.ok) {
        // Redirect to the collection page after successful submission
        window.location.href = '/collection';
      } else {
        // Handle errors
        alert('Failed to add entry.');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add entry.');
    }
  });
</script>